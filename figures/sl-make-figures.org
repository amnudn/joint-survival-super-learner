#+TITLE: Make figures for article
#+Author: Anders Munch
#+Date: \today

#+LANGUAGE:  en
#+OPTIONS:   num:t toc:nil ':t ^:t
#+PROPERTY: header-args:R :async :results output verbatim  :exports results  :session *R* :cache no

* Setup and load data
#+BEGIN_SRC R
  library(here)
  library(targets)
  ## Set wd to where we want to place figures
  try(setwd(here("figures")))
  ## Load targets
  tar_load(names = c("zel_sim2_1", "zel_sim2_1_n_events"),
           store = here("experiments/_targets/"))
  tar_load(c("zelefsky_statelearner", "ate_est_main_eff","ate_est_inter_eff"), store = here("zelefsky-case-study/_targets/"))
  library(data.table)
  library(ggplot2)
  library(gridExtra)
  library(MetBrewer)
#+END_SRC

#+RESULTS:

* Multi state illustration
#+BEGIN_SRC R :results graphics file :exports both :file figure-multi-state-process.pdf :width 10
library(prodlim)
library(here)
nTrans <- 3
stateLabels = c("Initial","Cause 1", "Cause 2", "Censored")
crHist <- Hist(time = 1:nTrans, event = list(from = rep("1", nTrans), to = stateLabels[-1]))
plot(crHist,stateLabels = stateLabels,arrowLabels = FALSE,
     tagBoxes = c(0,1,2,-1),
     box.width = 25) 
#+END_SRC

#+RESULTS:
[[file:figure-multi-state-process.pdf]]


#+BEGIN_SRC sh :exports none
  cp figure-multi-state-process.pdf ../tex/jrss-version/
#+END_SRC

* Numerical experiments
Marginal event and censoring probabilities:
#+BEGIN_SRC R :results output drawer
  event_cens_prob_table <- zel_sim2_1_n_events[,lapply(.SD, function(x) 100*x/100000) , .(time, sim_setting)]
  Publish::org(event_cens_prob_table[time == 36])
#+END_SRC

#+RESULTS:
:results:
| time | sim_setting | true_events | true_cens | at_risk |
|------+-------------+-------------+-----------+---------|
|   36 | original    |      24.619 |    61.853 |  25.774 |
|   36 | indep_cens  |      24.674 |    38.740 |  46.141 |
:end:


** IPCW based super learners
#+BEGIN_SRC R :results silent
  summ_zel_sim2_1 <- zel_sim2_1[, .(IPA = mean(IPA, na.rm = TRUE), se = sd(IPA, na.rm = TRUE)/sqrt(.N)), .(n_obs, sim_set, type, SL, time, type)]
  summ_zel_sim2_1[,SL:=factor(SL,
                              levels=c("ipcw_cox","ipcw_km","oracle","statelearner","survSL"),
                              labels=c("IPCW(Cox)","IPCW(KM)","Oracle","State learner", "survSL"))]
  summ_zel_sim2_1[,sim_set:=factor(sim_set,levels=c("indep_cens","original"),labels=c("Independent censoring","Dependent censoring"))]
  summ_zel_sim2_1[,sim_set2:=factor(sim_set,levels=c("Independent censoring","Dependent censoring"),labels=c("Independent censoring (38.7% censored)","Dependent censoring (61.9% censored)"))]
#+END_SRC


#+BEGIN_SRC R
  ipa_plot <- function(data, dd_ww = 0.1, linetype_vals = c(1,3,2,1), scales = "fixed", ncol = 2, nrow = 1){
      ggplot(data[SL != "Oracle"],
             aes(x = n_obs, y = IPA, group = SL)) +
          theme_bw() +
          theme(legend.key.size =  unit(2, "lines"), legend.margin=margin(c(0,0,-5,0))) +
          geom_errorbar(data = data[SL == "Oracle"],
                        position=position_dodge(width = dd_ww),
                        aes(ymin = IPA-1.96*se, ymax = IPA+1.96*se),
                        width = .1,
                        size = 1,
                        col = "gray") + 
          geom_line(aes(linetype = SL),
                    data = data[SL == "Oracle"],
                    position=position_dodge(width = dd_ww), linewidth = 1,
                    col = "gray") +
          geom_point(data = data[SL == "Oracle"],
                     position=position_dodge(width = dd_ww), size = 2,
                     col = "gray") +
          geom_errorbar(position=position_dodge(width = dd_ww),
                        aes(ymin = IPA-1.96*se, ymax = IPA+1.96*se),
                        width = .1,
                        size = 1) + 
          geom_line(aes(linetype = SL),position=position_dodge(width = dd_ww),linewidth = 1) +
          geom_point(position=position_dodge(width = dd_ww), size = 2) +      
          scale_x_continuous(trans='log2') +
          facet_wrap(~sim_set2, ncol = ncol, nrow = nrow, scales=scales) +
          ylab("IPA") + theme(legend.position="top")  +
          xlab("Number of observations") +
          scale_y_continuous(labels = scales::percent)  +
          scale_linetype_manual(values=linetype_vals)
      ## scale_color_manual("Super learner", values=c("#0072B2", "darkred", "gray","#E69F00"))
  }
#+END_SRC

#+RESULTS:

#+BEGIN_SRC R  :results graphics file :exports both :file experiment-fig-sl-ipcw.pdf :width 8 :height 3.5
  ipa_plot(data = summ_zel_sim2_1[time == 36 & type == "event" & SL != "survSL"])
#+END_SRC

#+RESULTS:
[[file:experiment-fig-sl-ipcw.pdf]]

#+BEGIN_SRC sh :exports none
  cp experiment-fig-sl-ipcw.pdf ../tex/jrss-version/
#+END_SRC

** State learner versus survSL

#+BEGIN_SRC R :results graphics file :exports both :file experiment-fig-sl-survSL-out.pdf :width 8 :height 3.5
  ipa_plot(data = summ_zel_sim2_1[time == 36 & type == "event" & !grepl("IPCW", SL)],
           linetype_vals = c(1,1,2))
#+END_SRC

#+RESULTS:
[[file:experiment-fig-sl-survSL-out.pdf]]

#+BEGIN_SRC sh :exports none
  cp experiment-fig-sl-survSL-out.pdf ../tex/jrss-version/
#+END_SRC

#+BEGIN_SRC R :results graphics file :exports both :file experiment-fig-sl-survSL-cens.pdf :width 6 :height 6
  ipa_plot(data = summ_zel_sim2_1[time == 36 & type == "cens" & !grepl("IPCW", SL)],
           linetype_vals = c(1,1,2), scales = "free_y", nrow = 2, ncol = 1)
#+END_SRC

#+RESULTS:
[[file:experiment-fig-sl-survSL-cens.pdf]]

#+BEGIN_SRC sh :exports none
  cp experiment-fig-sl-survSL-cens.pdf ../tex/jrss-version/
#+END_SRC

* Data application with competing event
** State learner
#+BEGIN_SRC R  :results graphics file :exports both :file real-data-state-learner.pdf :width 8 :height 4
  zel_real_plot_dt <- copy(zelefsky_statelearner$cv_fit)
  zel_real_plot_dt[,cause1:=factor(cause1,levels=c("cox_lasso","cox_elastic","cox_strata_stage","km","rf"),labels=c("lasso","elastic","strata","KM","RF"))]
  zel_real_plot_dt[,cause2:=factor(cause2,levels=c("cox_lasso","cox_elastic","cox_strata_stage","km","rf"),labels=c("lasso","elastic","strata","KM","RF"))]
  zel_real_plot_dt[,censor:=factor(censor,levels=c("cox_lasso","cox_elastic","cox_strata_stage","km","rf"),labels=paste("Censoring learner\n", c("lasso","elastic","strata","KM","RF")))]

  library(ggplot2)
  ggplot(zel_real_plot_dt, aes(x = cause1, y = loss, col = cause2)) +
    geom_point(position=position_dodge(width=1), size=.8) +
    geom_errorbar(aes(ymin = loss-2*sd, ymax = loss+2*sd), width = .4,
		  position=position_dodge(width=1)) +
    theme_bw() + ylab("Integrated Brier score") +
    theme(legend.position="top",
	  axis.text.x = element_text(angle = 45, vjust = .8)) +
    xlab("Tumor learner") +
    facet_grid( ~ censor) +
    scale_colour_grey("Death learner", start = 0, end = 0.7)
#+END_SRC

#+RESULTS:
[[file:real-data-state-learner.pdf]]

#+BEGIN_SRC sh :exports none
  cp real-data-state-learner.pdf ../tex/jrss-version/
#+END_SRC

Table

#+BEGIN_SRC R
  library(xtable)
  zel_real_tab_dt <- copy(zelefsky_statelearner$cv_fit)
  zel_real_tab_dt[,cause1:=factor(cause1,levels=c("cox_lasso","cox_elastic","cox_strata_stage","km","rf"),labels=c("\\texttt{Lasso}","\\texttt{Elastic}","\\texttt{Cox strata CT}","\\texttt{KM}","\\texttt{RF}"))]
  zel_real_tab_dt[,cause2:=factor(cause2,levels=c("cox_lasso","cox_elastic","cox_strata_stage","km","rf"),labels=c("\\texttt{Lasso}","\\texttt{Elastic}","\\texttt{Cox strata CT}","\\texttt{KM}","\\texttt{RF}"))]
  zel_real_tab_dt[,censor:=factor(censor,levels=c("cox_lasso","cox_elastic","cox_strata_stage","km","rf"),labels=c("\\texttt{Lasso}","\\texttt{Elastic}","\\texttt{Cox strata CT}","\\texttt{KM}","\\texttt{RF}"))]
  xtab <- zel_real_tab_dt[1:10, .(cause1, cause2, censor, IBS = paste0("$", round(loss, digits = 2), "\\pm", round(sd, digits = 2), "$"))]
  setnames(xtab,
	   c("cause1", "cause2", "censor", "IBS"),
	   new = c("Tumor learner", "Death learner", "Censoring learner", "Integrated Brier score"))
  print.xtable(xtable(xtab, align = c(rep("l", 4), "r")),
	       include.rownames=FALSE,
	       floating=FALSE,
	       sanitize.text.function = force,
	       booktabs=TRUE,
	       file = "real-data-tab.tex")
#+END_SRC

#+BEGIN_SRC sh :exports none
  cp real-data-tab.tex ../tex/jrss-version/
#+END_SRC

** Target parameter

#+BEGIN_SRC R :results graphics file :exports both :file real-data-target.pdf  :width 8 :height 3.5
  ate_est_inter_eff[effect == "ATE" & est_type == "one-step"] |>
    (\(plot_data)
      {
	plot_data[,cause:=factor(cause,levels=c("cause1","cause2"),labels=c("Tumor recurrence","Death"))]
	ggplot(plot_data, aes(x = time, y = est)) +
	  geom_errorbar(aes(ymin = lower, ymax = upper), width = 1) + 
	  geom_point() +
	  geom_hline(yintercept = 0, linetype = 2) +
	  theme_bw() +
	  facet_wrap( ~ cause) +
	  xlab("Months after baseline") + ylab("Average treatment effect of hormone therapy") +
	  scale_x_continuous(breaks = seq(6,36,12)) +
	  scale_y_continuous(labels = scales::percent)
      })()
#+END_SRC

#+RESULTS:
[[file:real-data-target.pdf]]

#+BEGIN_SRC sh :exports none
  cp real-data-target.pdf ../tex/jrss-version/
#+END_SRC

