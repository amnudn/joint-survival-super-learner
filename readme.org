#+PROPERTY: header-args:R :async :results output verbatim  :exports both  :session *R* :cache no
#+Title: The joint survival super learner (jossl)

This repository provides code that implements the joint survival super
learner which is a super learner for right-censored data. We provide
examples of how to use it as a stand-alone tool and in combination
with targeted learning. We also provide code to reproduce the
numerical experiments described in the associated [[https://arxiv.org/abs/2405.17259][article]]. Details are
given in [[./experiments/readme-experiments.org]]. The article describes a
real data example, but as we cannot share the data from that study,
the tutorial below uses an emulated data set with the same structure
as the original data analysed in the article.

To run the examples below, first run the following code to load the needed
functions.

#+BEGIN_SRC R :exports code
  library(here)
  library(targets)
  tar_source(here("R-code/functions"))
#+END_SRC

#+RESULTS:
#+begin_example
here() starts at /home/amnudn/Documents/phd/joint-survival-super-learner
data.table 1.17.8 using 8 threads (see ?getDTthreads).  Latest news: r-datatable.com
riskRegression version 2025.05.26

 randomForestSRC 3.4.1 
 
 Type rfsrc.news() to see new features, changes, and bug fixes. 
 


Attaching package: ‘ggplot2’

The following object is masked from ‘package:lava’:

    vars
#+end_example

We load and setup the emulated data as follows.
#+BEGIN_SRC R :exports code :results silent
  library(riskRegression)
  canc_dt <- fread(here("emulated-data/emulated-data.txt"))
  canc_dt[,stage:=factor(stage)]
  canc_dt[,hormones:=factor(hormones)]
#+END_SRC

The data looks as follows.

#+BEGIN_SRC R :exports both
  canc_dt
#+END_SRC

#+RESULTS:
#+begin_example
          time status   logPSA  stage    ggtot       sDose hormones
         <num>  <int>    <num> <fctr>    <num>       <num>   <fctr>
   1: 28.92331      1 2.043593   T3ab 9.851837 -0.76183395       No
   2: 14.20877      1 2.274948    T3c 6.881895 -0.35527003       No
   3: 15.89122      0 1.133611    T2a 7.794667 -1.59754020       No
   4: 61.61761      2 2.595044    T1c 8.879701 -0.81713882      Yes
   5: 26.01292      0 2.360323    T1c 5.804236  0.61412150      Yes
  ---                                                              
1038: 44.26178      0 1.137501    T2b 5.942560 -0.06968029      Yes
1039: 13.93434      0 1.898109    T1c 6.785073  0.46413725       No
1040: 52.19202      1 3.521309   T3ab 5.539725 -1.02355475       No
1041: 10.06398      0 2.900889    T2b 5.906983  1.18218871      Yes
1042: 25.70154      0 1.888293    T3c 7.163754  1.25946357      Yes
#+end_example


To set up the joint survival learner specify a list of learners. Each
learner is specified through a list with a =model= entry (for now,
=cox=, =GLMnet=, and =rfsrc= are implemented), and a =x_form= entry,
which provides a formula for which and how the covariates enter the
model. Additional arguments can be supplied to each learner by adding
entries to the list (e.g., =ntree= for a random survival forest).
#+BEGIN_SRC R :exports code
  library(glmnet)
  library(randomForestSRC)
  learners <- list(
      cox = list(model = "cox", x_form = ~logPSA+stage+ggtot+sDose+hormones),
      cox_penalty = list(model = "GLMnet", x_form = ~logPSA+stage+ggtot+sDose+hormones),
      N_Aa = list(model = "cox", x_form = ~1),
      N_Aa_strat = list(model = "cox", x_form = ~strata(hormones)),
      rf = list(model = "rfsrc", x_form = ~logPSA+stage+ggtot+sDose+hormones, ntree = 50)
  )
#+END_SRC

#+RESULTS:
: Loading required package: Matrix
: Loaded glmnet 4.1-10

Below we use the same list of learners to learn the cumulative hazards for cause
1, cause 2, and censoring. The function =jossl= returns a =list= consisting of

1) a =data.table= of triples of learners sorted according to their joint
   performance in predicting the state of the observed data in the interval 0 to
   =time=;
2) the top ranked triple of models fitted to the full data.
   
Here we use an interval of 36 month and show the 6 highest ranked triples.
#+BEGIN_SRC R :exports both
  set.seed(114)
  jossl_fit = jossl(learners = list(cause1 = learners,
				    cause2 = learners,
				    censor = learners),
		    data = canc_dt,
		    time = 36)
  head(jossl_fit$cv_fit)
#+END_SRC

#+RESULTS:
: Key: <loss>
:         cause1      cause2 censor     loss     b
:         <fctr>      <fctr> <fctr>    <num> <int>
: 1:         cox cox_penalty    cox 8.608565     1
: 2:         cox        N_Aa    cox 8.608565     1
: 3: cox_penalty cox_penalty    cox 8.609008     1
: 4: cox_penalty        N_Aa    cox 8.609008     1
: 5:         cox         cox    cox 8.610104     1
: 6: cox_penalty         cox    cox 8.610470     1

